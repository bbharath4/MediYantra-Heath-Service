<body class="d-flex flex-column h-100" style="background-color: #f5f5f5;">
  <% include ./partials/header %>
  <main role="main" class="flex-shrink-0">
    <div class="container">
      <% include ./partials/messages %>
      <div class="row">
        <div class="col-12 col-md-8" style="padding-top: 30px">
          <div id="map"></div>
        </div>
        <div class="col-md-4" style="padding-top: 30px">
          <div class="card border-success mb-3">
            <div class="card-header">Details</div>
            <div id="panel" class="card-body">
              <h4>Click on the marker on map to see more info</h4>
            </div>
          </div>
          <a href="/" id="my-button" class="btn btn-primary float-right">Back</a>
        </div>
      </div>
    </div>
  </main>
  
  <% include ./partials/footer %>

  <script>
    $(document).ready(function(){
      $('#hospitals').addClass('active');
      $('#hospitals-a').append('<span class="sr-only">(current)</span>');
    });
  </script>

  <script>
    let pos;
    let map;
    let bounds;
    let infoWindow;
    let currentInfoWindow;
    let service;
    let infoPane;
    function initMap() {
      // Initialize variables
      bounds = new google.maps.LatLngBounds();
      infoWindow = new google.maps.InfoWindow;
      currentInfoWindow = infoWindow;
      infoPane = document.getElementById('panel');

      // HTML5 geolocation
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
          pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          map = new google.maps.Map(document.getElementById('map'), {
            center: pos,
            zoom: 15
          });
          bounds.extend(pos);

          infoWindow.setPosition(pos);
          infoWindow.setContent('Location found.');
          infoWindow.open(map);
          map.setCenter(pos);

          // Call Places Nearby Search on user's location
          getNearbyPlaces(pos);
        }, () => {
          // Browser supports geolocation, but user has denied permission
          handleLocationError(true, infoWindow);
        });
      } else {
        // Browser doesn't support geolocation
        handleLocationError(false, infoWindow);
      }
    }

    // Handle a geolocation error
    function handleLocationError(browserHasGeolocation, infoWindow) {
      // Set default location to New Delhi, India
      pos = { lat: 28.6139, lng: 77.2090 };
      map = new google.maps.Map(document.getElementById('map'), {
        center: pos,
        zoom: 15,
        scrollwheel: true
      });

      // Display an InfoWindow at the map center
      infoWindow.setPosition(pos);
      infoWindow.setContent(browserHasGeolocation ?
        'Geolocation permissions denied. Using default location.' :
        'Error: Your browser doesn\'t support geolocation.');
      infoWindow.open(map);
      currentInfoWindow = infoWindow;

      // Call Places Nearby Search on the default location
      getNearbyPlaces(pos);
    }

    // Perform a Places Nearby Search Request
    function getNearbyPlaces(position) {
      let request = {
        location: position,
        //radius: '10000',
        rankBy: google.maps.places.RankBy.DISTANCE,
        type: ['hospital'],
        keyword: 'Hospital'
      };
      /*let request = {
        location: position,
        rankBy: google.maps.places.RankBy.DISTANCE,
        keyword: 'Hospital'
      };*/

      service = new google.maps.places.PlacesService(map);
      service.nearbySearch(request, nearbyCallback);
    }

    // Handle the results (up to 20) of the Nearby Search
    function nearbyCallback(results, status) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        createMarkers(results);
      }
    }

    // Set markers at the location of each place result
    function createMarkers(places) {
      places.forEach(place => {
        let marker = new google.maps.Marker({
          position: place.geometry.location,
          map: map,
          title: place.name
        });

        // Add click listener to each marker
        google.maps.event.addListener(marker, 'click', () => {
          let request = {
            placeId: place.place_id,
            fields: ['name', 'formatted_address', 'geometry', 'rating',
              'website', 'photos', 'formatted_phone_number', 'plus_code']
          };

          /* Only fetch the details of a place when the user clicks on a marker.
            * If we fetch the details for all place results as soon as we get
            * the search response, we will hit API rate limits. */
          service.getDetails(request, (placeResult, status) => {
            showDetails(placeResult, marker, status)
          });
        });

        // Adjust the map bounds to include the location of this marker
        bounds.extend(place.geometry.location);
      });
      /* Once all the markers have been placed, adjust the bounds of the map to
        * show all the markers within the visible area. */
      map.fitBounds(bounds);
    }

    // Builds an InfoWindow to display details above the marker
    function showDetails(placeResult, marker, status) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        let placeInfowindow = new google.maps.InfoWindow();
        let rating = "None";
        if (placeResult.rating) rating = placeResult.rating;
        placeInfowindow.setContent('<div><strong>' + placeResult.name +
          '</strong><br>' + 'Rating: ' + rating + '</div>');
        placeInfowindow.open(marker.map, marker);
        currentInfoWindow.close();
        currentInfoWindow = placeInfowindow;
        showPanel(placeResult);
      } else {
        console.log('showDetails failed: ' + status);
      }
    }

    // Displays place details in a sidebar
    function showPanel(placeResult) {
      // If infoPane is already open, close it
      if (infoPane.classList.contains("open")) {
        infoPane.classList.remove("open");
      }

      // Clear the previous details
      while (infoPane.lastChild) {
        infoPane.removeChild(infoPane.lastChild);
      }

      // Add place details with text formatting
      let name = document.createElement('h1');
      name.classList.add('place');
      name.textContent = placeResult.name;
      infoPane.appendChild(name);
      
      if (placeResult.rating) {
        let rating = document.createElement('p');
        rating.classList.add('details');
        rating.textContent = `Rating: ${placeResult.rating} \u272e`;
        infoPane.appendChild(rating);
      }

      if (placeResult.formatted_phone_number) {
        let phone = document.createElement('p');
        phone.classList.add('details');
        phone.textContent = `Phone: ${placeResult.formatted_phone_number} `;
        infoPane.appendChild(phone);
      }

      if (placeResult.plus_code.global_code) {
        $.ajax({
          type: "POST",
          url: "/loc",
          data: { plus_code: placeResult.plus_code.global_code },
          success: function(response) {
            let bed_total = document.createElement('p');
            let beds_available = document.createElement('p');
            let total_docs = document.createElement('p');

            bed_total.classList.add('details');
            beds_available.classList.add('details');
            total_docs.classList.add('details');

            bed_total.textContent = `Beds Total: ${response.beds_total}`;
            beds_available.textContent = `Beds Available: ${response.beds_available} `;
            total_docs.textContent = `Total Doctors: ${response.total_docs} `;

            infoPane.appendChild(bed_total);
            infoPane.appendChild(beds_available);
            infoPane.appendChild(total_docs);
          }
        });
      }

      let address = document.createElement('p');
      address.classList.add('details');
      address.textContent = placeResult.formatted_address;
      infoPane.appendChild(address);
      if (placeResult.website) {
        let websitePara = document.createElement('p');
        let websiteLink = document.createElement('a');
        let websiteUrl = document.createTextNode(placeResult.website);
        websiteLink.appendChild(websiteUrl);
        websiteLink.title = placeResult.website;
        websiteLink.href = placeResult.website;
        websitePara.appendChild(websiteLink);
        infoPane.appendChild(websitePara);
      }

      // Open the infoPane
      infoPane.classList.add("open");
    }
  </script>


  <script async defer src='https://maps.googleapis.com/maps/api/js?key=AIzaSyDkH-av4n0va4WDUZFhvb62D782uUoTLTQ&libraries=places&callback=initMap'>
  </script>
</body>